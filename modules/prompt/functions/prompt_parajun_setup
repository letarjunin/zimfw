# vim:et sts=2 sw=2 ft=zsh
#
# A two-line, Powerline-inspired theme that displays contextual information.

# Define variables.
_prompt_parajun_current_bg='NONE'
_prompt_parajun_segment_separator=''

function prompt_parajun_start_segment {
  local bg fg
  [[ -n "$1" ]] && bg="%K{$1}" || bg="%k"
  [[ -n "$2" ]] && fg="%F{$2}" || fg="%f"
  if [[ "$_prompt_parajun_current_bg" != 'NONE' && "$1" != "$_prompt_parajun_current_bg" ]]; then
    print -n " $bg%F{$_prompt_parajun_current_bg}$_prompt_parajun_segment_separator$fg "
  else
    print -n "$bg$fg "
  fi
  _prompt_parajun_current_bg="$1"
  [[ -n "$3" ]] && print -n "$3"
}

function prompt_parajun_end_segment {
  if [[ -n "$_prompt_parajun_current_bg" ]]; then
    print -n " %k%F{$_prompt_parajun_current_bg}$_prompt_parajun_segment_separator"
  else
    print -n "%k"
  fi
  print -n "%f"
  _prompt_parajun_current_bg=''
}

function prompt_parajun_build_prompt {
  if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    _prompt_remote=true
  # many other tests omitted
  else
    case $(ps -o comm= -p $PPID) in
      sshd|*/sshd) _prompt_remote=true;;
    esac
  fi
  #prompt_parajun_start_segment black default '%(?::%F{red}✘ )%(!:%F{yellow}⚡ :)%(1j:%F{cyan}(J) :)%F{blue}%n%F{red}'

  if [[ -n "$_prompt_remote" ]]; then
      prompt_parajun_start_segment red white '${MNAME}'
  else
      prompt_parajun_start_segment yellow black '${MNAME}'
  fi

  prompt_parajun_start_segment magenta black '%D{%H:%M}'
  prompt_parajun_start_segment blue black '$_prompt_parajun_pwd'

  if [[ -n "$git_info" ]]; then
    prompt_parajun_start_segment green black '${(e)git_info[ref]}${(e)git_info[status]}'
  fi

  prompt_parajun_end_segment
}

function prompt_parajun_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  _prompt_parajun_pwd=$(short_pwd)

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi

}

function prompt_parajun_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent sp subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-stipped-info before each command.
  add-zsh-hook precmd prompt_parajun_precmd

  # Set editor-info parameters.
  zstyle ':zim:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':zim:editor:info:keymap:primary' format '%B%F{blue}❯%f%b'
  zstyle ':zim:editor:info:keymap:primary:overwrite' format '%F{red}♺%f'
  zstyle ':zim:editor:info:keymap:alternate' format '%B%F{red}❮%f%b'

  # Set git-stipped-infoparameters.
  zstyle ':zim:git-info' verbose 'no'
  zstyle ':zim:git-info:action' format ' ⁝ %s'
  zstyle ':zim:git-info:ahead' format ' ⬆'
  zstyle ':zim:git-info:behind' format ' ⬇'
  zstyle ':zim:git-info:remotef' format '➙ %k '
  zstyle ':zim:git-info:branch' format ' %b'
  zstyle ':zim:git-info:commit' format '➦ %.7c'
  zstyle ':zim:git-info:position' format '%p'
  zstyle ':zim:git-info:stashed' format ' ✱'
  zstyle ':zim:git-info:keys' format \
    'status' '%b%k%p%c%A%B%s%S'

  # Define prompts.
  PROMPT='${(e)$(prompt_parajun_build_prompt)}
$ ${editor_info[keymap]}'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_parajun_setup "$@"
