# vim:et sts=2 sw=2 ft=zsh
#
# A two-line, Powerline-inspired theme that displays contextual information.

# Define variables.
#_prompt_parajun_segment_separator=''፨
_prompt_parajun_segment_separator="፨"
col='174'

_prompt_oxajun_git="፨"

source $HOME/.zim/modules/prompt/functions/async 2> /dev/null

function prompt_parajun_print_seperator_and_or_string {
  local color=$1
  local print_str=$2
  print -n "%k%F{$color}$_prompt_parajun_segment_separator "
  [[ -n "$2" ]] && print -n "$2 "
  print -n "%f"
}

function prompt_parajun_build_prompt {
  if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    _prompt_remote=true
  # many other tests omitted
  else
    case $(ps -o comm= -p $PPID) in
      sshd|*/sshd) _prompt_remote=true;;
    esac
  fi

  if [[ -n "$_prompt_remote" ]]; then
      prompt_parajun_print_seperator_and_or_string red ' ${MNAME}'
  else
      prompt_parajun_print_seperator_and_or_string yellow ' ${MNAME}'
  fi

  prompt_parajun_print_seperator_and_or_string magenta ' %D{%H:%M}'
  prompt_parajun_print_seperator_and_or_string blue '$_prompt_parajun_pwd'
  prompt_parajun_print_seperator_and_or_string white
}

function prompt_oxajun_async_callback {
  case $1 in
    prompt_oxajun_async_git)
      # We can safely split on ':' because it isn't allowed in ref names.
      IFS=':' read _git_target _git_post_target <<<"$3"

      # The target actually contains 3 space separated possibilities, so we need to
      # make sure we grab the first one.
      #_git_target=$(coalesce ${(@)${(z)_git_target}})
      #_git_target=$(coalesce ${_git_target})

      default_str="%k%F{green}$_prompt_parajun_segment_separator "
      if [[ -z "$_git_target" ]]; then
        # No git target detected, flush the git fragment and redisplay the prompt.
        if [[ -n "$_prompt_oxajun_git" ]]; then
          _prompt_oxajun_git="$default_str "
          zle && zle reset-prompt
        fi
      else
        # Git target detected, update the git fragment and redisplay the prompt.
        #_prompt_oxajun_git="${_git_target}${_git_post_target}"
        _prompt_oxajun_git="$default_str ${_git_target}${_git_post_target}"
        zle && zle reset-prompt
      fi
      ;;
  esac
}

function prompt_oxajun_async_git {
  cd -q "$1"
  if (( $+functions[git-info] )); then
    git-info
    print ${git_info}
  fi
}

function prompt_oxajun_async_tasks {
  # Initialize async worker. This needs to be done here and not in
  # prompt_oxajun_setup so the git formatting can be overridden by other prompts.
  if (( !${prompt_prezto_async_init:-0} )); then
    async_start_worker prompt_oxajun -n
    async_register_callback prompt_oxajun prompt_oxajun_async_callback
    typeset -g prompt_prezto_async_init=1
  fi

  # Kill the old process of slow commands if it is still running.
  async_flush_jobs prompt_oxajun

  # Compute slow commands in the background.
  async_job prompt_oxajun prompt_oxajun_async_git "$PWD"
}

function prompt_parajun_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  _prompt_parajun_pwd=" $(short_pwd)"

  prompt_oxajun_async_tasks
}

function prompt_parajun_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent sp subst)

  # Load required functions.
  autoload -Uz async && async
  autoload -Uz add-zsh-hook

  # Add hook for calling git-stipped-info before each command.
  add-zsh-hook precmd prompt_parajun_precmd

  # Set editor-info parameters.
  zstyle ':zim:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':zim:editor:info:keymap:primary' format '%B%F{blue}❯%f%b'
  zstyle ':zim:editor:info:keymap:primary:overwrite' format '%F{red}♺%f'
  zstyle ':zim:editor:info:keymap:alternate' format '%B%F{red}❮%f%b'

  # Set git-stipped-infoparameters.
  zstyle ':zim:git-info' ignore_submodules 'all'
  zstyle ':zim:git-info' verbose 'no'
  zstyle ':zim:git-info:action' format ' ⁝ %s'
  zstyle ':zim:git-info:ahead' format ' ⬆'
  zstyle ':zim:git-info:behind' format ' ⬇'
  zstyle ':zim:git-info:remotef' format '⸙ %k '
  zstyle ':zim:git-info:branch' format '%F{red} %b'
  zstyle ':zim:git-info:commit' format '➦ %.7c'
  zstyle ':zim:git-info:position' format '%p'
  zstyle ':zim:git-info:stashed' format ' ✱'
  zstyle ':zim:git-info:untracked' format ' %F{yellow} (%u)'
  zstyle ':zim:git-info:keys' format \
    'status' '%k%b%p%c%A%B%s%S%u'

  # Define prompts.
  PROMPT='${(e)$(prompt_parajun_build_prompt)}
፨  ${editor_info[keymap]}'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
  RPROMPT='$_prompt_oxajun_git'
}

prompt_parajun_setup "$@"
